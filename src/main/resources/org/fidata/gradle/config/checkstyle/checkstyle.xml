<?xml version="1.0" encoding="UTF-8"?>
<!--
    Checkstyle rules
    Copyright (C)  Basil Peace

    Based on the combination of google_checks.xml and sun_checks.xml
    from Checkstyle, licensed under LGPL v2.0+

    This file is part of gradle-base-plugins.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License
    as published by the Free Software Foundation, either version 3
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this program.
    If not, see <https://www.gnu.org/licenses/>.
-->
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      https://docs.oracle.com/javase/specs/jls/se11/html/index.html

    - the Sun Code Conventions at https://www.oracle.com/technetwork/java/codeconvtoc-136057.html

    - the Javadoc guidelines at
      https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html

    - the JDK Api documentation https://docs.oracle.com/en/java/javase/11/

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sourceforge.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name = "Checker">
        <property name="basedir" value="${basedir}"/>

    <!--
        TODO:
        This should be set equal to encoding in JavaCompile task
        <grv87 2014-04-03>
    -->
    <property name="charset" value="UTF-8"/>

    <property name="fileExtensions" value="java"/>

    <!--
        TODO:
        Configure this
        <grv87 2019-04-03>

        <property name="cacheFile" value=""/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sourceforge.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sourceforge.net/config_misc.html -->
    <module name="NewlineAtEndOfFile">
        <!--
            CAVEAT:
            We don't use system separator to overcome situation when repo was cloned
            with LF line separators on shared disk and used under Windows
            <grv87 2019-03-24>
        -->
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="RegexpSingleline">
       <property name="format" value="\s+$"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="SuppressWarningsFilter"/>

    <module name="TreeWalker">
        <!-- Checks for annotations location -->
        <!-- See http://checkstyle.sourceforge.net/config_javadoc.html -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCasesSeparateLines"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="tokens" value="PACKAGE_DEF"/>
            <property name="tokens" value="ENUM_CONSTANT_DEF"/>
            <property name="tokens" value="ENUM_DEF"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationAllowSameLine"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
            <property name="allowSamelineParameterizedAnnotation" value="true"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="PackageAnnotation"/>
        <module name="SuppressWarningsHolder">
            <!--
                WORKAROUND:
                Checkstyle has problems with aliases:
                1) They are replacers, not aliases (see https://github.com/checkstyle/checkstyle/issues/6637)
                2) Only one alias can exist (see https://github.com/checkstyle/checkstyle/issues/6638)
                So, we can't use any alias for HiddenField and have to manually suppress it together with IDEA checks
                <grv87 2019-04-05>
                <property name="aliasList" value="com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck=ParameterHidesMemberVariable"/>
                <property name="aliasList" value="com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck=LocalVariableHidesMemberVariable"/>
            -->
            <property name="aliasList" value="com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck=AssignmentToMethodParameter"/>
        </module>

        <!-- Checks for blocks. You know, those {}'s -->
        <!-- See http://checkstyle.sourceforge.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY"/>
            <property name="tokens" value="LITERAL_FINALLY"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="tokens" value="LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_SWITCH"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/> <!-- TODO -->
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens" value="LITERAL_TRY"/>
            <property name="tokens" value="LITERAL_CATCH"/>
            <property name="tokens" value="LITERAL_FINALLY"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="tokens" value="LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="LITERAL_FOR"/>
            <property name="tokens" value="LITERAL_WHILE"/>
            <property name="tokens" value="STATIC_INIT"/>
            <property name="tokens" value="INSTANCE_INIT"/>
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sourceforge.net/config_design.html -->
        <module name="DesignForExtension"/> <!-- TODO: for libraries only -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/>
        <module name="VisibilityModifier"/>

        <!-- Checks for common coding problems -->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html -->
        <module name="ArrayTrailingComma"/>
        <module name="CovariantEquals"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough"/>
        <module name="FinalLocalVariable">
            <property name="validateEnhancedForLoopVariable" value="true"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="IllegalCatch"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL"/>
            <property name="tokens" value="CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1"/>
            <property name="ignoreHashCodeMethod" value="true"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="UnnecessaryParentheses"/>
        <module name="VariableDeclarationUsageDistance">
            <property name="ignoreFinal" value="false"/>
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sourceforge.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="ImportOrder">
            <property name="option" value="top"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
        </module>

        <!-- Checks for Javadoc comments -->
        <!-- See http://checkstyle.sourceforge.net/config_javadoc.html -->
        <module name="AtclauseOrder"/>
        <module name="JavadocMethod">
            <property name="scope" value="package"/>
            <property name="allowedAnnotations" value="Override"/>
            <property name="allowedAnnotations" value="Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <module name="JavadocParagraph"/>
        <module name="JavadocStyle"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="JavadocType">
            <property name="scope" value="package"/>
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="package"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <module name="SummaryJavadoc">
            <!--
                TODO:
                Checkstyle claims that their support of this Google's style rule is full.
                However, they actually check examples listed in Google's style guide only,
                not the whole rule.
                Check of the whole rule requires using sentence parsing library
                <grv87 2019-04-03>
            -->
            <property name="forbiddenSummaryFragments"
                      value="^(A(n)? )?\{@code [a-zA-Z0-9]+\}( is )|^(A(n)? )?&lt;code&gt;[a-zA-Z0-9]+&lt;/code&gt;( is )|^@return |^This method "/>
        </module>

        <!-- Modifier Checks -->
        <!-- See http://checkstyle.sourceforge.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Naming conventions -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="AbbreviationAsWordInName">
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="ignoreFinal" value="false"/>
        </module>
        <module name="AbstractClassName">
            <property name="ignoreName" value="true"/> <!-- TODO -->
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ConstantName"/>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="StaticVariableName"/>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks for whitespace -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="tokens" value="IMPORT"/>
            <property name="tokens" value="STATIC_IMPORT"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="tokens" value="ENUM_DEF"/>
            <property name="tokens" value="STATIC_INIT"/>
            <property name="tokens" value="INSTANCE_INIT"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="VARIABLE_DEF"/> <!-- TOTEST -->
        </module>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceAfter">
            <property name="id" value="NoWhitespaceAfterExceptLineBreaks"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens" value="ARRAY_INIT"/>
            <property name="tokens" value="AT"/>
            <property name="tokens" value="INC"/>
            <property name="tokens" value="DEC"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="tokens" value="INDEX_OP"/>
            <property name="tokens" value="METHOD_REF"/>
            <!-- TODO: LITERAL_SYNCHRONIZED -->
        </module>
        <module name="NoWhitespaceAfter">
            <property name="id" value="NoWhitespaceAfterIncludingLineBreaks"/>
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="UNARY_MINUS"/>
            <property name="tokens" value="UNARY_PLUS"/>
            <property name="tokens" value="BNOT"/>
            <property name="tokens" value="LNOT"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="TYPECAST"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="id" value="NoWhitespaceBeforeIncludingLineBreaks"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens" value="DOT"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="id" value="NoWhitespaceBeforeExceptLineBreaks"/>
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="COMMA"/>
            <property name="tokens" value="SEMI"/>
            <property name="tokens" value="POST_INC"/>
            <property name="tokens" value="POST_DEC"/>
            <property name="tokens" value="GENERIC_END"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="tokens" value="METHOD_REF"/>
        </module>
        <module name="OperatorWrap">
            <property name="id" value="OperatorWrapLineBreakAfter"/>
            <property name="option" value="eol"/>
            <property name="tokens" value="QUESTION"/>
            <property name="tokens" value="COLON"/>
            <property name="tokens" value="EQUAL"/>
            <property name="tokens" value="NOT_EQUAL"/>
            <property name="tokens" value="DIV"/>
            <property name="tokens" value="PLUS"/>
            <property name="tokens" value="MINUS"/>
            <property name="tokens" value="STAR"/>
            <property name="tokens" value="MOD"/>
            <property name="tokens" value="SR"/>
            <property name="tokens" value="BSR"/>
            <property name="tokens" value="GE"/>
            <property name="tokens" value="GT"/>
            <property name="tokens" value="SL"/>
            <property name="tokens" value="LE"/>
            <property name="tokens" value="LT"/>
            <property name="tokens" value="BXOR"/>
            <property name="tokens" value="BOR"/>
            <property name="tokens" value="LOR"/>
            <property name="tokens" value="BAND"/>
            <property name="tokens" value="LAND"/>
            <property name="tokens" value="LITERAL_INSTANCEOF"/>
            <property name="tokens" value="TYPE_EXTENSION_AND"/>
            <property name="tokens" value="ASSIGN"/>
            <property name="tokens" value="DIV_ASSIGN"/>
            <property name="tokens" value="PLUS_ASSIGN"/>
            <property name="tokens" value="MINUS_ASSIGN"/>
            <property name="tokens" value="STAR_ASSIGN"/>
            <property name="tokens" value="MOD_ASSIGN"/>
            <property name="tokens" value="SR_ASSIGN"/>
            <property name="tokens" value="BSR_ASSIGN"/>
            <property name="tokens" value="SL_ASSIGN"/>
            <property name="tokens" value="BXOR_ASSIGN"/>
            <property name="tokens" value="BOR_ASSIGN"/>
            <property name="tokens" value="BAND_ASSIGN"/>
        </module>
        <module name="OperatorWrap">
            <!-- TODO: Should be prohibited too -->
            <property name="id" value="OperatorWrapLineBreakBefore"/>
            <property name="option" value="nl"/>
            <property name="tokens" value="METHOD_REF"/>
        </module>
        <module name="ParenPad"/>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapLineBreakAfter"/>
            <property name="option" value="eol"/>
            <property name="tokens" value="COMMA"/>
            <property name="tokens" value="SEMI"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="tokens" value="LPAREN"/>
            <property name="tokens" value="METHOD_REF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapLineBreakBefore"/>
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="AT"/>
        </module>
        <module name="SeparatorWrap">
            <!--
                TODO: this should be prohibited at all.
                See https://github.com/google/styleguide/issues/258
            -->
            <property name="id" value="SeparatorWrapTODO"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="eol"/>
        </module>
        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="true"/>
        </module>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA"/>
            <property name="tokens" value="SEMI"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="tokens" value="LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_WHILE"/>
            <property name="tokens" value="LITERAL_DO"/>
            <property name="tokens" value="LITERAL_FOR"/>
            <property name="tokens" value="DO_WHILE"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="ignoreEnhancedForColon" value="false"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
            <property name="allowByTailComment" value="true"/>
        </module>
        <module name="CommentsIndentation"/>
        <module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="2"/>
            <property name="arrayInitIndent" value="2"/>
            <property name="lineWrappingIndentation" value="2"/>
            <property name="forceStrictCondition" value="true"/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="TodoComment">
            <property name="format" value="TODO:|FIXME:|TOTEST:|TOTHINK:|ADDTEST:|TODOC:"/> <!-- TODO: sync with IDEA -->
        </module>
        <module name="UpperEll"/>
    </module>
</module>
