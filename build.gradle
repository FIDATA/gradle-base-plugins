#!/usr/bin/env groovy
/*
 * Build script for gradle-base-plugins
 * Copyright Â© 2017  Basil Peace
 *
 * This file is part of gradle-base-plugins.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
plugins {
  id 'org.fidata.project.groovy'
  id 'org.fidata.plugin'
}

group = 'org.fidata.gradle'

ext.rootDir = '.'

license = 'Apache-2.0'
publicReleases = false

jdk {
  version = 1.8
}
stutter {
  supports '4.3.1', '4.2.1', '4.1'
}

contacts {
  'grv87@yandex.ru' {
    moniker 'Basil Peace'
    github 'grv87'
    twitter 'grv87'
    roles 'owner', 'developer'
  }
}

apply from: "${project.ext.rootDir}/dependencies-compile.gradle"

sourceSets.main.groovy.srcDirs << ["${project.ext.rootDir}/src/dependencies/groovy", "${project.ext.rootDir}/src/main/groovy"]

tasks['groovydoc'].with {
  Closure addLinks = { List dependencies ->
    for (Map depNotation in dependencies) {
      if (depNotation['configurationName'] == 'api' && depNotation.containsKey('groovydoc')) {
        link depNotation['groovydoc'], "${ depNotation['group'] }."
      }
    }
  }

  addLinks org.fidata.gradle.ProjectPluginDependencies.DEPENDENCIES
  addLinks org.fidata.gradle.JDKProjectPluginDependencies.DEPENDENCIES
  addLinks org.fidata.gradle.GroovyProjectPluginDependencies.DEPENDENCIES
  addLinks org.fidata.gradle.GradlePluginPluginDependencies.DEPENDENCIES

  use = true // TOTEST
}

tasks['codenarcMain'].ext.disabledRules = ['JavaIoPackageAccess']

task('codenarcMainResources', type: CodeNarc) {
  for (File srcDir in sourceSets.main.resources.srcDirs) {
    source project.fileTree(dir: srcDir, includes: ['**/*.groovy'])
  }
}

dependencies {
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: 'latest.release'
}

sourceSets {
  integTest {
  	groovy.srcDir 'src/integTest/groovy'
    compileClasspath += sourceSets.main.output + configurations.testCompileClasspath
    runtimeClasspath += output + compileClasspath + configurations.testRuntimeClasspath
  }
}

task('integTest', type: Test) {
  testClassesDirs = sourceSets['integTest'].output.classesDirs
  classpath = sourceSets['integTest'].runtimeClasspath
  reports.with {
    junitXml.destination = new File(xmlReportsDir, 'integTest')
	html.destination = new File(htmlReportsDir, 'integTest')
	// html.enabled = false
  }
  systemProperty 'com.athaydes.spockframework.report.outputDir', new File(htmlReportsDir, 'spock/integTest').absolutePath
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
