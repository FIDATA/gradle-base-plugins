#!/usr/bin/env groovy
/*
 * Build script for gradle-base-plugins
 * Copyright Â© 2017-2018  Basil Peace
 *
 * This file is part of gradle-base-plugins.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
plugins {
  id 'org.fidata.project.jdk'
  id 'org.fidata.project.groovy'
  id 'org.fidata.plugin'
}

group = 'org.fidata.gradle'

ext.rootDir = '.'

license = 'Apache-2.0'
publicReleases = false

stutter {
  java(8) {
    compatibleRange '4.8'
  }
  java(9) {
    compatibleRange '4.8'
  }
}

contacts {
  'grv87@yandex.ru' {
    moniker 'Basil Peace'
    github 'grv87'
    roles 'owner', 'developer'
  }
}

apply from: "${ project.ext.rootDir }/gradle/dependencies-compile.gradle"

sourceSets.main.groovy.srcDirs += ["${ project.ext.rootDir }/src/plugin-dependencies/groovy"]

dependencies {
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: 'latest.release'
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks['codenarcMain'].disabledRules = ['JavaIoPackageAccess']

task('codenarcMainResources', type: CodeNarc) {
  for (File srcDir in sourceSets.main.resources.srcDirs) {
    source project.fileTree(dir: srcDir, includes: ['**/*.groovy'])
  }
}

/*
 * WORKAROUND:
 * https://github.com/DanySK/javadoc.io-linker/issues/5
 * `org.danilopianini.javadoc.io-linker` plugin doesn't work with `java-library` plugin
 * <grv87 2018-06-23>
 */
project.afterEvaluate {
  tasks['groovydoc'].link "https://static.javadoc.io/org.spdx/spdx-tools/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'org.spdx' && it.moduleName == 'spdx-tools' }.moduleVersion }/", 'org.spdx.'
}
